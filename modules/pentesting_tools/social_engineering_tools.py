"""
modules/pentesting_tools/social_engineering_tools.py

This module provides tools and simulations for performing ethical social engineering
attacks such as phishing campaigns, baiting, and pretexting as part of penetration testing.
"""

import smtplib
import random
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from pathlib import Path


class SocialEngineeringTools:
    """
    A class for simulating social engineering attacks for penetration testing purposes.
    """

    def __init__(self):
        self.result = None

    def send_phishing_email(self, smtp_server, port, sender_email, sender_password, target_email, subject, html_body):
        """
        Simulates a phishing email attack by sending an email with malicious content.
        :param smtp_server: SMTP server address.
        :param port: Port number for the SMTP server.
        :param sender_email: The attacker's email address.
        :param sender_password: The password for the attacker's email account.
        :param target_email: The target's email address.
        :param subject: The email subject.
        :param html_body: The email body in HTML format.
        :return: True if the email is sent successfully, False otherwise.
        """
        try:
            server = smtplib.SMTP(smtp_server, port)
            server.starttls()
            server.login(sender_email, sender_password)

            msg = MIMEMultipart()
            msg['From'] = sender_email
            msg['To'] = target_email
            msg['Subject'] = subject

            msg.attach(MIMEText(html_body, 'html'))

            server.sendmail(sender_email, target_email, msg.as_string())
            server.quit()

            print(f"Phishing email sent to {target_email}.")
            return True
        except Exception as e:
            print(f"Failed to send phishing email: {e}")
            return False

    def generate_fake_webpage(self, template_path, output_path, replacement_dict):
        """
        Generates a fake webpage for phishing by replacing template placeholders with malicious content.
        :param template_path: Path to the HTML template.
        :param output_path: Path to save the generated phishing webpage.
        :param replacement_dict: Dictionary with placeholders as keys and replacement text as values.
        :return: Path to the generated webpage.
        """
        try:
            template = Path(template_path)
            if not template.exists():
                raise FileNotFoundError(f"Template file not found: {template_path}")

            with open(template, "r", encoding="utf-8") as file:
                content = file.read()

            for placeholder, replacement in replacement_dict.items():
                content = content.replace(placeholder, replacement)

            with open(output_path, "w", encoding="utf-8") as file:
                file.write(content)

            print(f"Fake webpage generated at {output_path}.")
            return output_path
        except Exception as e:
            print(f"Failed to generate fake webpage: {e}")
            return None

    def baiting_simulation(self, usb_drives, drop_location):
        """
        Simulates a baiting attack by dropping malicious USB drives.
        :param usb_drives: Number of USB drives to simulate.
        :param drop_location: Location where the drives are "dropped."
        :return: Simulation summary.
        """
        try:
            print(f"Simulating the drop of {usb_drives} USB drives at {drop_location}.")
            drive_ids = [f"USB-{random.randint(1000, 9999)}" for _ in range(usb_drives)]
            summary = f"Dropped {len(drive_ids)} drives at {drop_location}: {', '.join(drive_ids)}"
            print(summary)
            return summary
        except Exception as e:
            print(f"Failed to simulate baiting: {e}")
            return None


if __name__ == "__main__":
    # Example Usage
    se_tools = SocialEngineeringTools()

    # Phishing Email Example
    smtp_server = "smtp.example.com"
    port = 587
    sender_email = "attacker@example.com"
    sender_password = "password123"
    target_email = "victim@example.com"
    subject = "Important Update Required"
    html_body = """
    <html>
        <body>
            <h1>Account Update Needed</h1>
            <p>Click <a href="http://malicious-link.com">here</a> to update your account details.</p>
        </body>
    </html>
    """
    se_tools.send_phishing_email(
        smtp_server, port, sender_email, sender_password, target_email, subject, html_body
    )

    # Fake Webpage Example
    template_path = "templates/phishing_template.html"
    output_path = "output/fake_webpage.html"
    replacement_dict = {"{{URL}}": "http://malicious-link.com", "{{TITLE}}": "Update Account"}
    se_tools.generate_fake_webpage(template_path, output_path, replacement_dict)

    # Baiting Simulation Example
    usb_drives = 5
    drop_location = "Office Lobby"
    se_tools.baiting_simulation(usb_drives, drop_location)
