"""
modules/pentesting_tools/csrf_tester.py

This module is designed to test web applications for Cross-Site Request Forgery (CSRF) vulnerabilities.
"""

import requests
from bs4 import BeautifulSoup

class CSRFTester:
    """
    A tool for detecting CSRF vulnerabilities in web forms.
    """

    def __init__(self, url):
        """
        Initializes the CSRFTester with a target URL.
        :param url: The URL of the web application to test.
        """
        self.url = url if url.startswith("http") else f"https://{url}"
        self.forms = []

    def fetch_forms(self):
        """
        Fetches all forms from the target URL's page.
        """
        try:
            response = requests.get(self.url, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, "html.parser")
            self.forms = soup.find_all("form")
            print(f"Found {len(self.forms)} forms on {self.url}")
        except requests.RequestException as e:
            print(f"Error fetching forms from {self.url}: {e}")
            self.forms = []

    def check_csrf_tokens(self, form):
        """
        Checks if a form contains CSRF protection tokens.
        :param form: A BeautifulSoup form element.
        :return: Boolean indicating the presence of CSRF tokens.
        """
        input_tags = form.find_all("input")
        for input_tag in input_tags:
            if "csrf" in input_tag.get("name", "").lower() or "token" in input_tag.get("name", "").lower():
                return True
        return False

    def analyze_forms(self):
        """
        Analyzes all forms on the page for CSRF vulnerabilities.
        :return: A list of results for each form.
        """
        results = []
        for index, form in enumerate(self.forms, start=1):
            form_action = form.get("action", "Not specified")
            form_method = form.get("method", "GET").upper()
            has_csrf = self.check_csrf_tokens(form)
            result = {
                "Form Index": index,
                "Action": form_action,
                "Method": form_method,
                "CSRF Protection": "Present" if has_csrf else "Missing",
                "Vulnerability": "Yes" if not has_csrf else "No",
            }
            results.append(result)
        return results

    def print_analysis(self, results):
        """
        Prints the analysis results in a readable format.
        :param results: The list of form analysis results.
        """
        print("\nCSRF Vulnerability Analysis Results:")
        for result in results:
            print(f"Form {result['Form Index']}:")
            print(f"  Action: {result['Action']}")
            print(f"  Method: {result['Method']}")
            print(f"  CSRF Protection: {result['CSRF Protection']}")
            print(f"  Vulnerability: {result['Vulnerability']}")
            print("-" * 40)

if __name__ == "__main__":
    # Example Usage
    target_url = "example.com"
    tester = CSRFTester(target_url)

    # Fetch and analyze forms
    print(f"Fetching forms from {target_url}...")
    tester.fetch_forms()

    if tester.forms:
        print(f"Analyzing forms on {target_url}...")
        analysis_results = tester.analyze_forms()
        tester.print_analysis(analysis_results)
    else:
        print("No forms found. Exiting.")
