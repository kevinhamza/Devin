"""
modules/pentesting_tools/external_host_discovery.py

Discovers external hosts and services via network scanning and DNS enumeration.
"""

import socket
import subprocess
from typing import List, Dict
from dns import resolver, exception


class ExternalHostDiscovery:
    """
    A class to perform external host discovery via network scans and DNS enumeration.
    """

    def __init__(self):
        """
        Initializes the ExternalHostDiscovery class.
        """
        self.hosts = []

    def ping_sweep(self, network: str, timeout: int = 1) -> List[str]:
        """
        Performs a ping sweep on a given network.
        :param network: CIDR notation (e.g., "192.168.1.0/24") or a single IP address.
        :param timeout: Timeout for each ping (in seconds).
        :return: List of reachable IP addresses.
        """
        reachable_hosts = []
        print(f"Starting ping sweep for network: {network}")

        if "/" in network:  # CIDR notation
            ips = self._generate_ip_range(network)
        else:  # Single IP
            ips = [network]

        for ip in ips:
            result = subprocess.run(
                ["ping", "-c", "1", "-W", str(timeout), ip],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            if result.returncode == 0:
                print(f"Host {ip} is reachable.")
                reachable_hosts.append(ip)
        return reachable_hosts

    def dns_enumeration(self, domain: str) -> Dict[str, List[str]]:
        """
        Enumerates DNS records for a given domain.
        :param domain: Target domain for DNS enumeration.
        :return: Dictionary containing DNS record types and their values.
        """
        print(f"Starting DNS enumeration for domain: {domain}")
        records = {"A": [], "AAAA": [], "MX": [], "NS": [], "CNAME": [], "TXT": []}
        try:
            for record_type in records.keys():
                try:
                    answers = resolver.resolve(domain, record_type)
                    records[record_type] = [rdata.to_text() for rdata in answers]
                    print(f"{record_type} Records: {records[record_type]}")
                except exception.DNSException:
                    print(f"No {record_type} records found for {domain}.")
        except Exception as e:
            print(f"Error during DNS enumeration: {e}")
        return records

    def port_scan(self, ip: str, ports: List[int]) -> Dict[int, str]:
        """
        Scans specified ports on a given IP.
        :param ip: Target IP address.
        :param ports: List of ports to scan.
        :return: Dictionary mapping open ports to service names.
        """
        print(f"Starting port scan on IP: {ip}")
        open_ports = {}
        for port in ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((ip, port))
                if result == 0:
                    service_name = socket.getservbyport(port, "tcp")
                    open_ports[port] = service_name
                    print(f"Port {port} is open. Service: {service_name}")
                sock.close()
            except Exception as e:
                print(f"Error scanning port {port}: {e}")
        return open_ports

    def _generate_ip_range(self, cidr: str) -> List[str]:
        """
        Generates a list of IPs from a CIDR block.
        :param cidr: CIDR notation (e.g., "192.168.1.0/24").
        :return: List of IP addresses.
        """
        from ipaddress import ip_network
        try:
            network = ip_network(cidr, strict=False)
            return [str(ip) for ip in network.hosts()]
        except Exception as e:
            print(f"Error generating IP range: {e}")
            return []


if __name__ == "__main__":
    # Example Usage
    discovery = ExternalHostDiscovery()

    # Ping sweep example
    reachable = discovery.ping_sweep("192.168.1.0/24")
    print(f"Reachable hosts: {reachable}")

    # DNS enumeration example
    dns_records = discovery.dns_enumeration("example.com")
    print(f"DNS Records: {dns_records}")

    # Port scan example
    ports = discovery.port_scan("192.168.1.1", [22, 80, 443])
    print(f"Open ports: {ports}")
