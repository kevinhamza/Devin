"""
modules/pentesting_tools/dns_poisoning_tools.py

Implements tools for DNS spoofing and poisoning operations for ethical hacking and network testing.
"""

import socket
from dnslib import DNSRecord, QTYPE
from threading import Thread
import time


class DNSSpoofingServer:
    """
    A simple DNS spoofing server for testing DNS poisoning attacks.
    """

    def __init__(self, redirect_ip: str, spoofed_domains: dict, host: str = "0.0.0.0", port: int = 53):
        """
        Initializes the DNS spoofing server.
        :param redirect_ip: IP address to redirect the spoofed domains.
        :param spoofed_domains: Dictionary of domains to spoof and their redirected IPs.
        :param host: Host to bind the server (default is 0.0.0.0).
        :param port: Port to bind the DNS server (default is 53).
        """
        self.redirect_ip = redirect_ip
        self.spoofed_domains = spoofed_domains
        self.host = host
        self.port = port

    def start(self):
        """
        Starts the DNS spoofing server.
        """
        print(f"Starting DNS spoofing server on {self.host}:{self.port}")
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.bind((self.host, self.port))
        try:
            while True:
                data, addr = sock.recvfrom(512)
                Thread(target=self.handle_request, args=(sock, data, addr)).start()
        except KeyboardInterrupt:
            print("Stopping DNS spoofing server.")
        except Exception as e:
            print(f"Error: {e}")
        finally:
            sock.close()

    def handle_request(self, sock: socket.socket, data: bytes, addr):
        """
        Handles DNS requests and responds with spoofed data if applicable.
        :param sock: The socket handling the DNS requests.
        :param data: The DNS request data.
        :param addr: The client address.
        """
        try:
            request = DNSRecord.parse(data)
            domain = str(request.q.qname)[:-1]  # Remove trailing dot
            print(f"DNS request for: {domain}")
            if domain in self.spoofed_domains:
                spoofed_ip = self.spoofed_domains[domain]
                reply = request.reply()
                reply.add_answer(
                    reply.q.qname, QTYPE.A, ttl=60, rdata=spoofed_ip
                )
                sock.sendto(reply.pack(), addr)
                print(f"Spoofed DNS response sent for {domain} -> {spoofed_ip}")
            else:
                print(f"Domain {domain} not in spoofed list. Ignoring request.")
        except Exception as e:
            print(f"Error handling DNS request: {e}")


class DNSPoisoningTester:
    """
    A class to test DNS poisoning in a controlled environment.
    """

    @staticmethod
    def test_spoofing(spoofed_domains: dict, redirect_ip: str, test_domains: list):
        """
        Tests the DNS spoofing by sending mock DNS queries.
        :param spoofed_domains: Dictionary of domains to spoof and their redirected IPs.
        :param redirect_ip: IP address to redirect spoofed domains.
        :param test_domains: List of domains to test.
        """
        try:
            server = DNSSpoofingServer(redirect_ip=redirect_ip, spoofed_domains=spoofed_domains)
            Thread(target=server.start, daemon=True).start()
            time.sleep(1)  # Wait for the server to initialize
            for domain in test_domains:
                ip = DNSPoisoningTester.send_query(domain)
                print(f"Test result for {domain}: {ip}")
        except Exception as e:
            print(f"DNS spoofing test failed: {e}")

    @staticmethod
    def send_query(domain: str) -> str:
        """
        Sends a DNS query to the server and returns the response.
        :param domain: The domain to query.
        :return: The resolved IP address.
        """
        try:
            query = DNSRecord.question(domain)
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.sendto(query.pack(), ("127.0.0.1", 53))
            response, _ = sock.recvfrom(512)
            reply = DNSRecord.parse(response)
            return reply.rr[0].rdata
        except Exception as e:
            print(f"Error sending DNS query for {domain}: {e}")
            return "Error"


if __name__ == "__main__":
    # Example Usage
    spoofed_domains = {
        "example.com": "192.168.1.100",
        "test.com": "192.168.1.101",
    }
    redirect_ip = "192.168.1.100"
    test_domains = ["example.com", "test.com", "nonexistent.com"]

    DNSPoisoningTester.test_spoofing(spoofed_domains, redirect_ip, test_domains)
