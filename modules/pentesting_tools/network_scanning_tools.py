"""
modules/pentesting_tools/network_scanning_tools.py

This module provides tools for advanced network scanning, including port scanning, service enumeration,
OS detection, and network topology discovery.
"""

import socket
import ipaddress
from typing import List, Dict, Tuple
import subprocess
import platform


class NetworkScanner:
    """
    A class for performing network scans and analyzing the results.
    """

    @staticmethod
    def ping_sweep(network: str) -> List[str]:
        """
        Perform a ping sweep to identify active hosts in a given network.
        :param network: CIDR network range (e.g., "192.168.1.0/24").
        :return: A list of active IP addresses.
        """
        print(f"Starting ping sweep for network: {network}")
        active_hosts = []
        try:
            for ip in ipaddress.IPv4Network(network, strict=False):
                response = subprocess.run(
                    ["ping", "-c", "1", "-W", "1", str(ip)] if platform.system() != "Windows" else ["ping", "-n", "1", "-w", "1000", str(ip)],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )
                if response.returncode == 0:
                    print(f"Host {ip} is active.")
                    active_hosts.append(str(ip))
        except Exception as e:
            print(f"Error during ping sweep: {e}")
        return active_hosts

    @staticmethod
    def port_scan(host: str, ports: List[int]) -> Dict[int, str]:
        """
        Perform a port scan on a given host.
        :param host: Target host IP or domain.
        :param ports: List of ports to scan.
        :return: A dictionary mapping open ports to their status ("open" or "closed").
        """
        print(f"Starting port scan for host: {host}")
        port_status = {}
        try:
            for port in ports:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(1)
                    result = s.connect_ex((host, port))
                    if result == 0:
                        print(f"Port {port} is open.")
                        port_status[port] = "open"
                    else:
                        port_status[port] = "closed"
        except Exception as e:
            print(f"Error during port scan: {e}")
        return port_status

    @staticmethod
    def os_detection(host: str) -> str:
        """
        Perform OS detection using TTL-based fingerprinting.
        :param host: Target host IP or domain.
        :return: Detected OS as a string.
        """
        print(f"Starting OS detection for host: {host}")
        try:
            response = subprocess.run(
                ["ping", "-c", "1", host] if platform.system() != "Windows" else ["ping", "-n", "1", host],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )
            output = response.stdout.decode()
            if "ttl=64" in output.lower():
                return "Linux"
            elif "ttl=128" in output.lower():
                return "Windows"
            elif "ttl=255" in output.lower():
                return "Cisco"
            else:
                return "Unknown"
        except Exception as e:
            print(f"Error during OS detection: {e}")
            return "Error"

    @staticmethod
    def traceroute(host: str) -> List[str]:
        """
        Perform a traceroute to a target host to map the network path.
        :param host: Target host IP or domain.
        :return: A list of hops (IP addresses or hostnames).
        """
        print(f"Starting traceroute for host: {host}")
        hops = []
        try:
            traceroute_command = (
                ["traceroute", host] if platform.system() != "Windows" else ["tracert", host]
            )
            response = subprocess.run(
                traceroute_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )
            output = response.stdout.decode().splitlines()
            for line in output:
                if "*" not in line:
                    hops.append(line.strip())
        except Exception as e:
            print(f"Error during traceroute: {e}")
        return hops


class NetworkScannerTester:
    """
    A class to test the network scanning tools.
    """

    @staticmethod
    def run_tests():
        """
        Runs tests for network scanning tools.
        """
        print("Running network scanning tests...")

        # Ping Sweep Test
        active_hosts = NetworkScanner.ping_sweep("192.168.1.0/24")
        print(f"Active hosts: {active_hosts}")

        # Port Scan Test
        port_status = NetworkScanner.port_scan("192.168.1.1", [22, 80, 443, 8080])
        print(f"Port scan results: {port_status}")

        # OS Detection Test
        os_detected = NetworkScanner.os_detection("192.168.1.1")
        print(f"Detected OS: {os_detected}")

        # Traceroute Test
        hops = NetworkScanner.traceroute("example.com")
        print(f"Traceroute results: {hops}")


if __name__ == "__main__":
    # Run network scanner tests
    NetworkScannerTester.run_tests()
