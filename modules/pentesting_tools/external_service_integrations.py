"""
modules/pentesting_tools/external_service_integrations.py

Integrates with external security services like VirusTotal, Hybrid Analysis, and others to gather intelligence and reports.
"""

import requests
import json
from pathlib import Path

class ExternalServiceIntegrations:
    """
    A class to interact with external security services for malware intelligence and threat analysis.
    """

    def __init__(self, api_keys):
        """
        Initializes the ExternalServiceIntegrations class with API keys for various services.
        :param api_keys: A dictionary containing API keys for different services.
        """
        self.api_keys = api_keys

    def virustotal_scan(self, file_path):
        """
        Uploads a file to VirusTotal for scanning.
        :param file_path: Path to the file to be scanned.
        :return: Scan results as a dictionary.
        """
        api_key = self.api_keys.get("virustotal")
        if not api_key:
            raise ValueError("VirusTotal API key not provided.")

        url = "https://www.virustotal.com/api/v3/files"
        headers = {"x-apikey": api_key}
        files = {"file": open(file_path, "rb")}
        
        try:
            print("Uploading file to VirusTotal...")
            response = requests.post(url, headers=headers, files=files)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"Error during VirusTotal scan: {e}")
            return {"error": str(e)}

    def hybrid_analysis_scan(self, file_path):
        """
        Uploads a file to Hybrid Analysis for scanning.
        :param file_path: Path to the file to be scanned.
        :return: Scan results as a dictionary.
        """
        api_key = self.api_keys.get("hybrid_analysis")
        if not api_key:
            raise ValueError("Hybrid Analysis API key not provided.")

        url = "https://www.hybrid-analysis.com/api/v2/submit/file"
        headers = {
            "api-key": api_key,
            "User-Agent": "Falcon Sandbox",
        }
        files = {"file": open(file_path, "rb")}
        
        try:
            print("Uploading file to Hybrid Analysis...")
            response = requests.post(url, headers=headers, files=files)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"Error during Hybrid Analysis scan: {e}")
            return {"error": str(e)}

    def fetch_iocs(self, threat_id, source="virustotal"):
        """
        Fetches Indicators of Compromise (IoCs) for a given threat ID from a specific source.
        :param threat_id: The ID of the threat to fetch IoCs for.
        :param source: The external service source ("virustotal" or "hybrid_analysis").
        :return: IoC data as a dictionary.
        """
        if source == "virustotal":
            api_key = self.api_keys.get("virustotal")
            url = f"https://www.virustotal.com/api/v3/files/{threat_id}"
            headers = {"x-apikey": api_key}
        elif source == "hybrid_analysis":
            api_key = self.api_keys.get("hybrid_analysis")
            url = f"https://www.hybrid-analysis.com/api/v2/report/{threat_id}/summary"
            headers = {
                "api-key": api_key,
                "User-Agent": "Falcon Sandbox",
            }
        else:
            raise ValueError(f"Unknown source: {source}")

        try:
            print(f"Fetching IoCs from {source} for threat ID: {threat_id}")
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"Error fetching IoCs: {e}")
            return {"error": str(e)}

    def save_results(self, results, output_dir, filename):
        """
        Saves the results to a JSON file.
        :param results: The results dictionary to save.
        :param output_dir: Directory to save the results.
        :param filename: Name of the output file.
        """
        output_dir = Path(output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        output_path = output_dir / filename
        
        with open(output_path, "w") as f:
            json.dump(results, f, indent=4)
        
        print(f"Results saved to {output_path}")

if __name__ == "__main__":
    # Example Usage
    api_keys = {
        "virustotal": "your_virustotal_api_key_here",
        "hybrid_analysis": "your_hybrid_analysis_api_key_here",
    }
    esi = ExternalServiceIntegrations(api_keys)
    file_to_scan = "suspicious_file.exe"
    
    # VirusTotal Scan
    vt_results = esi.virustotal_scan(file_to_scan)
    esi.save_results(vt_results, "analysis_results", "virustotal_results.json")
    
    # Hybrid Analysis Scan
    ha_results = esi.hybrid_analysis_scan(file_to_scan)
    esi.save_results(ha_results, "analysis_results", "hybrid_analysis_results.json")
