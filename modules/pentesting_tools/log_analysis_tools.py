"""
modules/pentesting_tools/log_analysis_tools.py

Provides tools for analyzing system, application, and security logs to identify anomalies and potential security threats.
"""

import re
from datetime import datetime
from typing import List, Dict, Any


class LogAnalyzer:
    """
    A class for analyzing log files for anomalies and potential security issues.
    """

    @staticmethod
    def load_log_file(file_path: str) -> List[str]:
        """
        Loads a log file and returns its contents as a list of lines.
        :param file_path: Path to the log file.
        :return: List of log lines.
        """
        print(f"Loading log file: {file_path}")
        try:
            with open(file_path, 'r') as file:
                lines = file.readlines()
            print(f"Loaded {len(lines)} lines from {file_path}")
            return lines
        except FileNotFoundError:
            print(f"Error: Log file {file_path} not found.")
        except Exception as e:
            print(f"Error loading log file: {e}")
        return []

    @staticmethod
    def filter_logs_by_keyword(log_lines: List[str], keyword: str) -> List[str]:
        """
        Filters logs that contain a specific keyword.
        :param log_lines: List of log lines.
        :param keyword: Keyword to search for in logs.
        :return: Filtered list of logs containing the keyword.
        """
        print(f"Filtering logs for keyword: {keyword}")
        filtered_logs = [line for line in log_lines if keyword in line]
        print(f"Found {len(filtered_logs)} logs containing keyword: {keyword}")
        return filtered_logs

    @staticmethod
    def detect_suspicious_patterns(log_lines: List[str], patterns: List[str]) -> List[str]:
        """
        Detects suspicious patterns in the log lines.
        :param log_lines: List of log lines.
        :param patterns: List of regex patterns to match against the logs.
        :return: Logs matching any of the patterns.
        """
        print("Scanning logs for suspicious patterns...")
        suspicious_logs = []
        for pattern in patterns:
            regex = re.compile(pattern)
            matches = [line for line in log_lines if regex.search(line)]
            suspicious_logs.extend(matches)
            print(f"Pattern '{pattern}' matched {len(matches)} logs.")
        return suspicious_logs

    @staticmethod
    def parse_timestamps(log_lines: List[str], time_format: str) -> List[datetime]:
        """
        Extracts and parses timestamps from log lines.
        :param log_lines: List of log lines.
        :param time_format: Timestamp format in the logs.
        :return: List of parsed datetime objects.
        """
        print("Parsing timestamps from logs...")
        timestamps = []
        for line in log_lines:
            try:
                timestamp_str = re.search(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}', line)
                if timestamp_str:
                    timestamp = datetime.strptime(timestamp_str.group(), time_format)
                    timestamps.append(timestamp)
            except Exception as e:
                print(f"Error parsing timestamp: {e}")
        print(f"Extracted {len(timestamps)} timestamps from logs.")
        return timestamps

    @staticmethod
    def identify_anomalies(log_lines: List[str], threshold: int = 10) -> List[str]:
        """
        Identifies anomalies by finding repeated entries or unusual patterns.
        :param log_lines: List of log lines.
        :param threshold: Minimum number of occurrences to flag as an anomaly.
        :return: List of anomalous log lines.
        """
        print(f"Identifying anomalies with a threshold of {threshold} occurrences...")
        log_counts = {}
        for line in log_lines:
            log_counts[line] = log_counts.get(line, 0) + 1
        anomalies = [log for log, count in log_counts.items() if count > threshold]
        print(f"Found {len(anomalies)} anomalies.")
        return anomalies


class LogAnalysisTester:
    """
    A class to test the functionalities of LogAnalyzer.
    """

    @staticmethod
    def run_tests():
        """
        Runs a series of log analysis tests.
        """
        print("Starting log analysis tests...")
        sample_logs = [
            "2024-12-21 10:00:00 INFO User login successful.",
            "2024-12-21 10:05:00 WARNING Multiple failed login attempts detected.",
            "2024-12-21 10:10:00 ERROR Unauthorized access attempt from 192.168.1.101.",
            "2024-12-21 10:15:00 INFO User logout successful.",
            "2024-12-21 10:20:00 WARNING Potential brute-force attack detected.",
            "2024-12-21 10:25:00 ERROR System overload due to high traffic.",
        ]

        # Test filtering by keyword
        filtered_logs = LogAnalyzer.filter_logs_by_keyword(sample_logs, "ERROR")
        print("Filtered Logs:", filtered_logs)

        # Test suspicious pattern detection
        patterns = [r"Unauthorized access", r"brute-force"]
        suspicious_logs = LogAnalyzer.detect_suspicious_patterns(sample_logs, patterns)
        print("Suspicious Logs:", suspicious_logs)

        # Test timestamp parsing
        timestamps = LogAnalyzer.parse_timestamps(sample_logs, "%Y-%m-%d %H:%M:%S")
        print("Parsed Timestamps:", timestamps)

        # Test anomaly detection
        anomalies = LogAnalyzer.identify_anomalies(sample_logs, threshold=1)
        print("Anomalies:", anomalies)


if __name__ == "__main__":
    # Example Usage
    LogAnalysisTester.run_tests()
