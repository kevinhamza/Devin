"""
modules/pentesting_tools/session_hijacking_tester.py

This module is designed to detect session hijacking vulnerabilities in web applications and simulate hijacking attempts for ethical purposes.
"""

import requests
from http.cookies import SimpleCookie

class SessionHijackingTester:
    """
    A tool for testing web applications for session hijacking vulnerabilities.
    """

    def __init__(self, target_url):
        """
        Initializes the SessionHijackingTester with the target URL.
        :param target_url: The URL of the web application to test.
        """
        self.target_url = target_url if target_url.startswith("http") else f"https://{target_url}"
        self.session = requests.Session()
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Session Hijacking Tester)",
            "Accept": "*/*",
        }

    def simulate_session(self, cookies):
        """
        Simulates a session by injecting cookies into the HTTP headers.
        :param cookies: A dictionary of session cookies to use.
        """
        self.session.cookies.update(cookies)

    def fetch_page(self, url):
        """
        Fetches a page while using the simulated session.
        :param url: The URL of the page to fetch.
        :return: Response object from the GET request.
        """
        try:
            response = self.session.get(url, headers=self.headers, timeout=10)
            response.raise_for_status()
            return response
        except requests.RequestException as e:
            print(f"Error fetching page {url}: {e}")
            return None

    def extract_cookies(self, headers):
        """
        Extracts cookies from HTTP headers.
        :param headers: Response headers containing cookies.
        :return: A dictionary of cookies.
        """
        if "set-cookie" not in headers:
            return {}

        cookies = SimpleCookie()
        cookies.load(headers["set-cookie"])
        return {key: morsel.value for key, morsel in cookies.items()}

    def test_session_hijacking(self, cookie_string):
        """
        Tests session hijacking by injecting a session cookie and accessing a restricted resource.
        :param cookie_string: A string of cookies to test.
        """
        # Convert cookie string to a dictionary
        cookies = {item.split("=")[0]: item.split("=")[1] for item in cookie_string.split("; ")}
        self.simulate_session(cookies)

        print(f"Testing session hijacking with cookies: {cookies}")
        response = self.fetch_page(self.target_url)
        if response:
            if "restricted" in response.text.lower() or response.status_code == 200:
                print("Session hijacking successful: Accessed restricted resource.")
            else:
                print("Session hijacking failed: No access to restricted resource.")
        else:
            print("Error during session hijacking test.")

    def analyze_cookie_security(self, cookies):
        """
        Analyzes session cookies for security attributes.
        :param cookies: A dictionary of session cookies.
        """
        print("\nAnalyzing cookies for security attributes:")
        for cookie_name, cookie_value in cookies.items():
            secure = "Secure" if "secure" in cookie_value.lower() else "Not Secure"
            http_only = "HttpOnly" if "httponly" in cookie_value.lower() else "Not HttpOnly"
            print(f"Cookie: {cookie_name}")
            print(f"  Secure: {secure}")
            print(f"  HttpOnly: {http_only}")
            print("-" * 40)

if __name__ == "__main__":
    # Example Usage
    target = "example.com/restricted-area"
    hijack_tester = SessionHijackingTester(target)

    # Fetch initial page to analyze cookies
    print(f"Fetching initial page from {target}...")
    response = hijack_tester.fetch_page(target)
    if response:
        extracted_cookies = hijack_tester.extract_cookies(response.headers)
        if extracted_cookies:
            hijack_tester.analyze_cookie_security(extracted_cookies)
        else:
            print("No cookies found on the initial page.")

    # Test hijacking with a sample cookie string
    sample_cookie_string = "session_id=abcdef123456; path=/; secure; HttpOnly"
    hijack_tester.test_session_hijacking(sample_cookie_string)
