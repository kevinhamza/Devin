"""
modules/pentesting_tools/packet_analysis.py

This module provides tools for capturing and analyzing network packets.
It includes packet sniffing, filtering, and exporting capabilities for penetration testing
and forensic analysis.
"""

import os
import socket
from scapy.all import sniff, wrpcap, rdpcap, TCP, UDP, IP


class PacketAnalysis:
    """
    A class for capturing and analyzing network packets.
    """

    def __init__(self):
        self.packets = []

    @staticmethod
    def capture_packets(interface=None, count=100, timeout=None, filter_rule=None):
        """
        Captures network packets.
        :param interface: Network interface to listen on (e.g., eth0).
        :param count: Number of packets to capture.
        :param timeout: Timeout in seconds.
        :param filter_rule: Filter rule for packet capture (e.g., 'tcp').
        :return: List of captured packets.
        """
        try:
            print(f"Capturing packets on interface: {interface or 'default'}")
            packets = sniff(
                iface=interface,
                count=count,
                timeout=timeout,
                filter=filter_rule,
                prn=lambda x: x.summary(),
            )
            print(f"Captured {len(packets)} packets.")
            return packets
        except Exception as e:
            print(f"Failed to capture packets: {e}")
            return []

    @staticmethod
    def save_packets(packets, file_path="captured_packets.pcap"):
        """
        Saves captured packets to a file.
        :param packets: List of packets to save.
        :param file_path: Path to the file.
        """
        try:
            wrpcap(file_path, packets)
            print(f"Packets saved to {file_path}")
        except Exception as e:
            print(f"Failed to save packets: {e}")

    @staticmethod
    def load_packets(file_path):
        """
        Loads packets from a PCAP file.
        :param file_path: Path to the PCAP file.
        :return: List of loaded packets.
        """
        try:
            packets = rdpcap(file_path)
            print(f"Loaded {len(packets)} packets from {file_path}")
            return packets
        except Exception as e:
            print(f"Failed to load packets: {e}")
            return []

    @staticmethod
    def analyze_packets(packets, protocol=None):
        """
        Analyzes packets and filters by protocol.
        :param packets: List of packets to analyze.
        :param protocol: Protocol to filter (e.g., 'TCP', 'UDP').
        :return: Filtered packets.
        """
        try:
            filtered_packets = [
                pkt
                for pkt in packets
                if protocol is None
                or (protocol.upper() == "TCP" and TCP in pkt)
                or (protocol.upper() == "UDP" and UDP in pkt)
            ]
            print(
                f"Filtered {len(filtered_packets)} packets for protocol: {protocol or 'all'}"
            )
            for pkt in filtered_packets:
                print(pkt.summary())
            return filtered_packets
        except Exception as e:
            print(f"Failed to analyze packets: {e}")
            return []

    @staticmethod
    def extract_data_from_packets(packets):
        """
        Extracts raw data from packets.
        :param packets: List of packets.
        :return: List of extracted data.
        """
        try:
            data = [pkt[IP].payload for pkt in packets if IP in pkt]
            print(f"Extracted data from {len(data)} packets.")
            return data
        except Exception as e:
            print(f"Failed to extract data: {e}")
            return []


if __name__ == "__main__":
    # Example Usage
    packet_analyzer = PacketAnalysis()

    # Packet Capture Example
    captured_packets = packet_analyzer.capture_packets(count=10, filter_rule="tcp")

    # Save Packets
    packet_analyzer.save_packets(captured_packets, "packets.pcap")

    # Load Packets
    loaded_packets = packet_analyzer.load_packets("packets.pcap")

    # Analyze Packets
    filtered_packets = packet_analyzer.analyze_packets(loaded_packets, protocol="TCP")

    # Extract Data
    extracted_data = packet_analyzer.extract_data_from_packets(filtered_packets)
