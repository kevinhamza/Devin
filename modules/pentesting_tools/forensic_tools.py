"""
modules/pentesting_tools/forensic_tools.py

This module provides tools for digital forensic analysis, including data recovery,
log analysis, and timeline reconstruction, as part of penetration testing and
post-incident investigations.
"""

import os
import hashlib
from datetime import datetime
from pathlib import Path


class ForensicTools:
    """
    A class for performing forensic analysis on systems and networks.
    """

    def __init__(self):
        self.result = None

    @staticmethod
    def hash_file(file_path, algorithm="sha256"):
        """
        Computes the hash of a given file using the specified algorithm.
        :param file_path: Path to the file.
        :param algorithm: Hashing algorithm (e.g., sha256, md5).
        :return: Hash value of the file or None if an error occurs.
        """
        try:
            hash_func = hashlib.new(algorithm)
            with open(file_path, "rb") as file:
                while chunk := file.read(8192):
                    hash_func.update(chunk)
            print(f"File hash ({algorithm}) for {file_path}: {hash_func.hexdigest()}")
            return hash_func.hexdigest()
        except Exception as e:
            print(f"Failed to hash file: {e}")
            return None

    @staticmethod
    def analyze_logs(log_file, keywords):
        """
        Analyzes a log file for specific keywords.
        :param log_file: Path to the log file.
        :param keywords: List of keywords to search for.
        :return: List of log entries containing the keywords.
        """
        try:
            if not os.path.exists(log_file):
                raise FileNotFoundError(f"Log file not found: {log_file}")

            matches = []
            with open(log_file, "r", encoding="utf-8") as file:
                for line in file:
                    if any(keyword in line for keyword in keywords):
                        matches.append(line.strip())

            print(f"Found {len(matches)} matching log entries.")
            return matches
        except Exception as e:
            print(f"Failed to analyze logs: {e}")
            return []

    @staticmethod
    def recover_deleted_files(directory):
        """
        Simulates recovery of deleted files from a directory.
        :param directory: Directory to scan for deleted files.
        :return: List of recovered file names.
        """
        try:
            print(f"Scanning directory for recoverable files: {directory}")
            # This is a simulation. Actual recovery requires lower-level access.
            recovered_files = [
                f"recovered_file_{i}.txt" for i in range(1, 4)
            ]  # Mock recovered files
            for file_name in recovered_files:
                file_path = Path(directory) / file_name
                with open(file_path, "w") as file:
                    file.write(f"Recovered content of {file_name}")
                print(f"Recovered: {file_path}")
            return recovered_files
        except Exception as e:
            print(f"Failed to recover files: {e}")
            return []

    @staticmethod
    def reconstruct_timeline(events):
        """
        Reconstructs a timeline of events based on input data.
        :param events: List of tuples containing event details (timestamp, description).
        :return: Sorted list of events by timestamp.
        """
        try:
            sorted_events = sorted(events, key=lambda x: x[0])
            print("Timeline of events reconstructed:")
            for event in sorted_events:
                print(f"{event[0]}: {event[1]}")
            return sorted_events
        except Exception as e:
            print(f"Failed to reconstruct timeline: {e}")
            return []


if __name__ == "__main__":
    # Example Usage
    forensic_tools = ForensicTools()

    # File Hashing Example
    file_path = "example_file.txt"
    forensic_tools.hash_file(file_path, "sha256")

    # Log Analysis Example
    log_file = "system_logs.log"
    keywords = ["ERROR", "WARNING", "CRITICAL"]
    forensic_tools.analyze_logs(log_file, keywords)

    # File Recovery Example
    directory = "./recovered_files"
    os.makedirs(directory, exist_ok=True)
    forensic_tools.recover_deleted_files(directory)

    # Timeline Reconstruction Example
    events = [
        (datetime(2024, 12, 1, 10, 0), "System rebooted"),
        (datetime(2024, 12, 1, 10, 5), "User logged in"),
        (datetime(2024, 12, 1, 10, 10), "Error detected in application"),
    ]
    forensic_tools.reconstruct_timeline(events)
