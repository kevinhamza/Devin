"""
modules/pentesting_tools/password_cracker.py

This module implements password cracking tools including brute force
and dictionary attacks, allowing for ethical penetration testing.
"""

import hashlib
import itertools
import string
from pathlib import Path


class PasswordCracker:
    """
    A class to handle password cracking tasks, including dictionary and brute force attacks.
    """

    def __init__(self):
        """
        Initializes the password cracker with default configurations.
        """
        self.result = None

    @staticmethod
    def hash_password(password, algorithm="sha256"):
        """
        Hashes a password using the specified algorithm.
        :param password: The plaintext password to hash.
        :param algorithm: The hashing algorithm (e.g., 'sha256', 'md5').
        :return: The hashed password as a hexadecimal string.
        """
        try:
            hash_func = getattr(hashlib, algorithm)()
            hash_func.update(password.encode())
            return hash_func.hexdigest()
        except AttributeError:
            raise ValueError(f"Unsupported hashing algorithm: {algorithm}")

    def dictionary_attack(self, hash_to_crack, dictionary_path, algorithm="sha256"):
        """
        Attempts to crack a password hash using a dictionary attack.
        :param hash_to_crack: The password hash to crack.
        :param dictionary_path: Path to the dictionary file.
        :param algorithm: Hashing algorithm used (e.g., 'sha256', 'md5').
        :return: The plaintext password if found, otherwise None.
        """
        dictionary = Path(dictionary_path)
        if not dictionary.exists():
            raise FileNotFoundError(f"Dictionary file not found: {dictionary_path}")

        with open(dictionary, "r", encoding="utf-8") as file:
            for word in file:
                word = word.strip()
                hashed_word = self.hash_password(word, algorithm)
                if hashed_word == hash_to_crack:
                    self.result = word
                    return word

        return None

    def brute_force_attack(self, hash_to_crack, charset, max_length, algorithm="sha256"):
        """
        Attempts to crack a password hash using a brute force attack.
        :param hash_to_crack: The password hash to crack.
        :param charset: The set of characters to use for brute force (e.g., string.ascii_letters).
        :param max_length: The maximum length of the password.
        :param algorithm: Hashing algorithm used (e.g., 'sha256', 'md5').
        :return: The plaintext password if found, otherwise None.
        """
        for length in range(1, max_length + 1):
            for attempt in itertools.product(charset, repeat=length):
                attempt_password = ''.join(attempt)
                hashed_attempt = self.hash_password(attempt_password, algorithm)
                if hashed_attempt == hash_to_crack:
                    self.result = attempt_password
                    return attempt_password

        return None

    def crack_password(self, hash_to_crack, method="dictionary", **kwargs):
        """
        Cracks a password hash using the specified method.
        :param hash_to_crack: The password hash to crack.
        :param method: The attack method ('dictionary' or 'brute_force').
        :param kwargs: Additional arguments for the specified method.
        :return: The plaintext password if found, otherwise None.
        """
        if method == "dictionary":
            return self.dictionary_attack(hash_to_crack, **kwargs)
        elif method == "brute_force":
            return self.brute_force_attack(hash_to_crack, **kwargs)
        else:
            raise ValueError(f"Unsupported cracking method: {method}")


if __name__ == "__main__":
    # Example Usage
    cracker = PasswordCracker()

    # Example hash to crack
    example_password = "password123"
    example_hash = cracker.hash_password(example_password, "sha256")
    print(f"Example Hash (sha256): {example_hash}")

    # Dictionary attack
    dictionary_file = "data/dictionary.txt"  # Example dictionary file path
    cracked_password = cracker.crack_password(
        example_hash, method="dictionary", dictionary_path=dictionary_file, algorithm="sha256"
    )
    if cracked_password:
        print(f"Password cracked (Dictionary): {cracked_password}")
    else:
        print("Password not found (Dictionary)")

    # Brute force attack
    cracked_password = cracker.crack_password(
        example_hash, method="brute_force", charset=string.ascii_lowercase, max_length=6, algorithm="sha256"
    )
    if cracked_password:
        print(f"Password cracked (Brute Force): {cracked_password}")
    else:
        print("Password not found (Brute Force)")
