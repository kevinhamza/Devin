"""
modules/pentesting_tools/os_fingerprint_scanner.py

Performs OS fingerprinting to identify operating systems on remote hosts.
"""

import socket
import platform
import subprocess
from typing import Dict, List


class OSFingerprintScanner:
    """
    A class for identifying operating systems on remote hosts using fingerprinting techniques.
    """

    def __init__(self):
        """
        Initializes the OSFingerprintScanner class.
        """
        self.results = {}

    def tcp_ip_stack_fingerprint(self, target_ip: str, ports: List[int]) -> Dict[str, str]:
        """
        Attempts OS fingerprinting via TCP/IP stack characteristics.
        :param target_ip: IP address of the target.
        :param ports: List of ports to use for fingerprinting.
        :return: Dictionary containing detected OS information.
        """
        print(f"Starting TCP/IP stack fingerprinting on {target_ip}")
        os_info = {}
        for port in ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                sock.connect((target_ip, port))
                sock.send(b"SYN")  # Simulating SYN packet
                response = sock.recv(1024)
                os_info[port] = self._analyze_response(response)
                sock.close()
            except Exception as e:
                print(f"Error during fingerprinting on port {port}: {e}")
        return os_info

    def nmap_os_detection(self, target_ip: str) -> Dict[str, str]:
        """
        Uses Nmap to perform OS detection.
        :param target_ip: IP address of the target.
        :return: Dictionary containing detected OS information.
        """
        print(f"Starting Nmap OS detection on {target_ip}")
        try:
            result = subprocess.check_output(
                ["nmap", "-O", target_ip],
                stderr=subprocess.DEVNULL,
                universal_newlines=True
            )
            return self._parse_nmap_output(result)
        except Exception as e:
            print(f"Error during Nmap OS detection: {e}")
            return {"error": str(e)}

    def banner_grabbing(self, target_ip: str, port: int) -> str:
        """
        Performs banner grabbing to identify OS or service information.
        :param target_ip: IP address of the target.
        :param port: Port to use for banner grabbing.
        :return: Banner information as a string.
        """
        print(f"Starting banner grabbing on {target_ip}:{port}")
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            sock.connect((target_ip, port))
            sock.send(b"HEAD / HTTP/1.1\r\nHost: target\r\n\r\n")
            banner = sock.recv(1024).decode("utf-8")
            sock.close()
            return banner
        except Exception as e:
            print(f"Error during banner grabbing: {e}")
            return f"Error: {e}"

    def local_os_detection(self) -> str:
        """
        Identifies the local operating system.
        :return: Local OS details.
        """
        print("Detecting local OS details.")
        try:
            os_details = platform.uname()
            return f"System: {os_details.system}, Node: {os_details.node}, Version: {os_details.version}"
        except Exception as e:
            print(f"Error detecting local OS: {e}")
            return f"Error: {e}"

    def _analyze_response(self, response: bytes) -> str:
        """
        Analyzes TCP/IP stack response to infer OS characteristics.
        :param response: Raw response from the target.
        :return: String describing the OS characteristics.
        """
        print("Analyzing TCP/IP stack response.")
        try:
            if b"Linux" in response:
                return "Linux-based OS detected"
            elif b"Windows" in response:
                return "Windows-based OS detected"
            elif b"macOS" in response:
                return "macOS detected"
            else:
                return "Unknown OS"
        except Exception as e:
            print(f"Error analyzing response: {e}")
            return "Error"

    def _parse_nmap_output(self, output: str) -> Dict[str, str]:
        """
        Parses the output from Nmap to extract OS information.
        :param output: Nmap output as a string.
        :return: Dictionary containing OS details.
        """
        print("Parsing Nmap output.")
        os_info = {}
        try:
            lines = output.split("\n")
            for line in lines:
                if "Running:" in line:
                    os_info["OS"] = line.split("Running:")[1].strip()
                if "OS details:" in line:
                    os_info["Details"] = line.split("OS details:")[1].strip()
        except Exception as e:
            print(f"Error parsing Nmap output: {e}")
        return os_info


if __name__ == "__main__":
    # Example Usage
    scanner = OSFingerprintScanner()

    # TCP/IP stack fingerprinting example
    tcp_results = scanner.tcp_ip_stack_fingerprint("192.168.1.1", [80, 443])
    print(f"TCP/IP Stack Fingerprinting Results: {tcp_results}")

    # Nmap OS detection example
    nmap_results = scanner.nmap_os_detection("192.168.1.1")
    print(f"Nmap OS Detection Results: {nmap_results}")

    # Banner grabbing example
    banner = scanner.banner_grabbing("192.168.1.1", 80)
    print(f"Banner Grabbing Result: {banner}")

    # Local OS detection example
    local_os = scanner.local_os_detection()
    print(f"Local OS Details: {local_os}")
