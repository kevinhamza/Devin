"""
vulnerability_reporting.py
==========================
Generates comprehensive vulnerability reports based on scan results and assessments.
"""

import os
import json
import datetime
from modules.pentesting_tools.vulnerability_management import VulnerabilityDatabase

class VulnerabilityReport:
    """
    Class to generate and manage vulnerability reports.
    """

    def __init__(self, report_dir: str = "reports/"):
        self.report_dir = report_dir
        self.db = VulnerabilityDatabase()

        # Ensure the report directory exists
        os.makedirs(self.report_dir, exist_ok=True)

    def generate_report(self, target: str) -> str:
        """
        Generate a report for a given target.

        :param target: The target system or domain.
        :return: The file path of the generated report.
        """
        vulnerabilities = self.db.fetch_vulnerabilities(target)

        if not vulnerabilities:
            return f"No vulnerabilities found for target: {target}"

        report_data = {
            "target": target,
            "generated_on": str(datetime.datetime.now()),
            "vulnerabilities": vulnerabilities
        }

        report_file = os.path.join(self.report_dir, f"report_{target}.json")
        with open(report_file, "w") as f:
            json.dump(report_data, f, indent=4)

        return report_file

    def generate_summary(self, target: str) -> str:
        """
        Generate a summary report for a given target.

        :param target: The target system or domain.
        :return: A string summary of vulnerabilities.
        """
        vulnerabilities = self.db.fetch_vulnerabilities(target)

        if not vulnerabilities:
            return f"No vulnerabilities found for target: {target}"

        summary = f"Vulnerability Summary for Target: {target}\n"
        summary += "-" * 50 + "\n"

        for vuln in vulnerabilities:
            summary += f"ID: {vuln['id']}, Severity: {vuln['severity']}, Description: {vuln['description']}\n"

        return summary

    def list_existing_reports(self):
        """
        List all existing vulnerability reports.

        :return: List of report file names.
        """
        return [f for f in os.listdir(self.report_dir) if f.endswith(".json")]

if __name__ == "__main__":
    # Example Usage
    report_generator = VulnerabilityReport()

    target = "example.com"
    print("Generating detailed report...")
    report_path = report_generator.generate_report(target)
    print(f"Report saved to: {report_path}")

    print("\nGenerating summary report...")
    print(report_generator.generate_summary(target))

    print("\nExisting reports:")
    print(report_generator.list_existing_reports())
