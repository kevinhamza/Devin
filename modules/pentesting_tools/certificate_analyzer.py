"""
modules/pentesting_tools/certificate_analyzer.py

Analyzes SSL/TLS certificates for security misconfigurations, weak algorithms, and expiration issues.
"""

import ssl
import socket
from datetime import datetime
from typing import Dict, Any, Optional


class CertificateAnalyzer:
    """
    A toolkit for analyzing SSL/TLS certificates.
    """

    def __init__(self, host: str, port: int = 443, timeout: int = 10):
        """
        Initializes the CertificateAnalyzer class.
        :param host: The target hostname or IP address.
        :param port: The target port (default is 443 for HTTPS).
        :param timeout: Timeout for the SSL connection.
        """
        self.host = host
        self.port = port
        self.timeout = timeout

    def fetch_certificate(self) -> Optional[Dict[str, Any]]:
        """
        Fetches the SSL/TLS certificate from the specified host.
        :return: A dictionary containing certificate details or None on error.
        """
        try:
            print(f"Fetching certificate from {self.host}:{self.port}")
            context = ssl.create_default_context()
            with socket.create_connection((self.host, self.port), self.timeout) as sock:
                with context.wrap_socket(sock, server_hostname=self.host) as ssock:
                    cert = ssock.getpeercert()
            return cert
        except (ssl.SSLError, socket.error) as e:
            print(f"Error fetching certificate: {e}")
            return None

    def analyze_certificate(self) -> Dict[str, Any]:
        """
        Analyzes the fetched SSL/TLS certificate for issues.
        :return: Analysis results.
        """
        cert = self.fetch_certificate()
        if not cert:
            return {"error": "Failed to retrieve certificate"}

        analysis = {
            "subject": cert.get("subject", []),
            "issuer": cert.get("issuer", []),
            "version": cert.get("version", "Unknown"),
            "serial_number": cert.get("serialNumber", "Unknown"),
            "valid_from": cert.get("notBefore", "Unknown"),
            "valid_to": cert.get("notAfter", "Unknown"),
            "expired": self._is_certificate_expired(cert),
            "validity_period": self._calculate_validity_period(cert),
            "san_entries": self._get_san_entries(cert),
        }
        print("Certificate analysis complete")
        return analysis

    def _is_certificate_expired(self, cert: Dict[str, Any]) -> bool:
        """
        Checks if the certificate is expired.
        :param cert: The certificate details.
        :return: True if expired, False otherwise.
        """
        try:
            valid_to = datetime.strptime(cert["notAfter"], "%b %d %H:%M:%S %Y %Z")
            is_expired = valid_to < datetime.utcnow()
            print(f"Certificate expired: {is_expired}")
            return is_expired
        except Exception as e:
            print(f"Error checking expiration: {e}")
            return True

    def _calculate_validity_period(self, cert: Dict[str, Any]) -> Optional[int]:
        """
        Calculates the validity period of the certificate in days.
        :param cert: The certificate details.
        :return: Validity period in days or None on error.
        """
        try:
            valid_from = datetime.strptime(cert["notBefore"], "%b %d %H:%M:%S %Y %Z")
            valid_to = datetime.strptime(cert["notAfter"], "%b %d %H:%M:%S %Y %Z")
            validity_period = (valid_to - valid_from).days
            print(f"Certificate validity period: {validity_period} days")
            return validity_period
        except Exception as e:
            print(f"Error calculating validity period: {e}")
            return None

    def _get_san_entries(self, cert: Dict[str, Any]) -> Optional[list]:
        """
        Extracts Subject Alternative Names (SAN) from the certificate.
        :param cert: The certificate details.
        :return: List of SAN entries or None if not available.
        """
        try:
            extensions = cert.get("extensions", [])
            san = [ext for ext in extensions if ext.get("oid") == "subjectAltName"]
            san_entries = [entry[1] for entry in san[0].get("value", [])] if san else None
            print(f"Extracted SAN entries: {san_entries}")
            return san_entries
        except Exception as e:
            print(f"Error extracting SAN entries: {e}")
            return None


if __name__ == "__main__":
    # Example Usage
    target_host = "example.com"
    analyzer = CertificateAnalyzer(target_host)
    result = analyzer.analyze_certificate()
    print(result)
