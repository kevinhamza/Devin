"""
modules/pentesting_tools/http_header_analyzer.py

This module analyzes HTTP headers of target websites to identify potential security misconfigurations and vulnerabilities.
"""

import requests
from pprint import pprint

class HTTPHeaderAnalyzer:
    """
    A tool for analyzing HTTP headers to detect security issues.
    """

    def __init__(self, url):
        """
        Initializes the HTTPHeaderAnalyzer with a target URL.
        :param url: The target URL to analyze headers for.
        """
        self.url = url if url.startswith("http") else f"https://{url}"
        self.headers = {}

    def fetch_headers(self):
        """
        Fetches HTTP headers from the target URL.
        """
        try:
            response = requests.head(self.url, allow_redirects=True, timeout=10)
            self.headers = response.headers
            print(f"Headers fetched successfully for {self.url}")
        except requests.RequestException as e:
            print(f"Error fetching headers for {self.url}: {e}")
            self.headers = {}

    def analyze_headers(self):
        """
        Analyzes HTTP headers for common security configurations and issues.
        :return: A dictionary of findings with recommendations.
        """
        findings = {}

        # Security headers to check
        header_checks = {
            "Strict-Transport-Security": {
                "description": "Enforces secure (HTTPS) connections to the server.",
                "recommendation": "Add the Strict-Transport-Security header to enforce HTTPS.",
                "expected": True,
            },
            "Content-Security-Policy": {
                "description": "Prevents content injection vulnerabilities like XSS.",
                "recommendation": "Add a Content-Security-Policy header to protect against XSS.",
                "expected": True,
            },
            "X-Frame-Options": {
                "description": "Prevents clickjacking attacks.",
                "recommendation": "Add the X-Frame-Options header to protect against clickjacking.",
                "expected": True,
            },
            "X-Content-Type-Options": {
                "description": "Prevents MIME-sniffing vulnerabilities.",
                "recommendation": "Add the X-Content-Type-Options header to prevent MIME-sniffing.",
                "expected": True,
            },
            "Referrer-Policy": {
                "description": "Controls the information sent in the Referer header.",
                "recommendation": "Add a Referrer-Policy header to control referrer information.",
                "expected": True,
            },
            "Permissions-Policy": {
                "description": "Controls which browser features can be used on the site.",
                "recommendation": "Add a Permissions-Policy header to control feature access.",
                "expected": True,
            },
        }

        # Analyze headers
        for header, info in header_checks.items():
            if header in self.headers:
                findings[header] = {"status": "Present", "description": info["description"]}
            else:
                findings[header] = {
                    "status": "Missing",
                    "description": info["description"],
                    "recommendation": info["recommendation"],
                }

        return findings

    def print_analysis(self, findings):
        """
        Prints the analysis results in a readable format.
        :param findings: The findings dictionary from analyze_headers.
        """
        print("\nHTTP Header Analysis Results:")
        pprint(findings)

if __name__ == "__main__":
    # Example Usage
    target_url = "example.com"
    analyzer = HTTPHeaderAnalyzer(target_url)

    # Fetch and analyze headers
    print(f"Fetching headers for {target_url}...")
    analyzer.fetch_headers()

    if analyzer.headers:
        print(f"Analyzing headers for {target_url}...")
        analysis_results = analyzer.analyze_headers()
        analyzer.print_analysis(analysis_results)
    else:
        print("No headers fetched. Exiting.")
