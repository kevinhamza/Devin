"""
Pentesting Module
=================
Comprehensive module providing tools for ethical hacking, vulnerability assessment, and penetration testing.
"""

import os
import subprocess
import socket
import requests
from scapy.all import ARP, Ether, srp
from bs4 import BeautifulSoup
import nmap
from paramiko import SSHClient, AutoAddPolicy
import hashlib
import whois
from dns import resolver
import ftplib


class PentestingModule:
    """
    PentestingModule provides a suite of tools for ethical hacking and vulnerability assessment.
    """

    def __init__(self):
        print("[INFO] Pentesting Module initialized.")

    # ----------------------- NETWORK SCANNING ----------------------- #

    def network_scan(self, subnet):
        """
        Scans the network to identify active devices.

        Args:
            subnet (str): Subnet to scan (e.g., "192.168.1.0/24").

        Returns:
            list: List of active devices with IP and MAC addresses.
        """
        print(f"[INFO] Scanning subnet: {subnet}")
        arp = ARP(pdst=subnet)
        ether = Ether(dst="ff:ff:ff:ff:ff:ff")
        packet = ether / arp
        result = srp(packet, timeout=3, verbose=0)[0]
        devices = [{'ip': received.psrc, 'mac': received.hwsrc} for sent, received in result]
        print(f"[INFO] Found {len(devices)} active devices.")
        return devices

    def port_scan(self, target, ports):
        """
        Scans specific ports on a target.

        Args:
            target (str): Target IP or hostname.
            ports (list): List of ports to scan.

        Returns:
            dict: Dictionary with port status (open/closed).
        """
        print(f"[INFO] Scanning ports on target: {target}")
        scanner = nmap.PortScanner()
        scanner.scan(target, ','.join(map(str, ports)))
        port_status = {}
        for port in ports:
            state = scanner[target]['tcp'][port]['state'] if target in scanner.all_hosts() else "unknown"
            port_status[port] = state
        print(f"[INFO] Port scan results: {port_status}")
        return port_status

    # ----------------------- PASSWORD ATTACKS ----------------------- #

    def brute_force_ssh(self, host, username, password_list):
        """
        Brute-forces SSH login.

        Args:
            host (str): SSH host IP or hostname.
            username (str): SSH username.
            password_list (list): List of passwords to try.

        Returns:
            str: Successful password or None.
        """
        print(f"[INFO] Starting SSH brute force attack on {host}")
        ssh = SSHClient()
        ssh.set_missing_host_key_policy(AutoAddPolicy())
        for password in password_list:
            try:
                ssh.connect(hostname=host, username=username, password=password, timeout=5)
                print(f"[SUCCESS] SSH login successful with password: {password}")
                ssh.close()
                return password
            except Exception:
                continue
        print("[INFO] SSH brute force attack failed.")
        return None

    # ----------------------- WEB APPLICATION TESTING ----------------------- #

    def sql_injection_test(self, target_url, payloads):
        """
        Tests for SQL injection vulnerabilities.

        Args:
            target_url (str): Target URL with a query parameter (e.g., "http://example.com?id=1").
            payloads (list): List of SQL injection payloads.

        Returns:
            list: Vulnerable payloads.
        """
        print(f"[INFO] Testing for SQL Injection on: {target_url}")
        vulnerable_payloads = []
        for payload in payloads:
            test_url = f"{target_url}{payload}"
            try:
                response = requests.get(test_url, timeout=5)
                if "error" in response.text.lower():
                    vulnerable_payloads.append(payload)
                    print(f"[INFO] Vulnerable payload found: {payload}")
            except Exception as e:
                print(f"[ERROR] SQL Injection test failed for payload: {payload}, error: {e}")
        return vulnerable_payloads

    def xss_test(self, target_url, payloads):
        """
        Tests for Cross-Site Scripting (XSS) vulnerabilities.

        Args:
            target_url (str): Target URL to test.
            payloads (list): List of XSS payloads.

        Returns:
            list: Vulnerable payloads.
        """
        print(f"[INFO] Testing for XSS on: {target_url}")
        vulnerable_payloads = []
        for payload in payloads:
            try:
                response = requests.get(target_url, params={"q": payload}, timeout=5)
                if payload in response.text:
                    vulnerable_payloads.append(payload)
                    print(f"[INFO] Vulnerable XSS payload found: {payload}")
            except Exception as e:
                print(f"[ERROR] XSS test failed for payload: {payload}, error: {e}")
        return vulnerable_payloads

    # ----------------------- FILE HASHING ----------------------- #

    def file_hashing(self, file_path):
        """
        Computes MD5, SHA1, and SHA256 hashes of a file.

        Args:
            file_path (str): Path to the file.

        Returns:
            dict: Dictionary of hashes.
        """
        print(f"[INFO] Hashing file: {file_path}")
        hashes = {"md5": None, "sha1": None, "sha256": None}
        try:
            with open(file_path, "rb") as file:
                data = file.read()
                hashes["md5"] = hashlib.md5(data).hexdigest()
                hashes["sha1"] = hashlib.sha1(data).hexdigest()
                hashes["sha256"] = hashlib.sha256(data).hexdigest()
        except Exception as e:
            print(f"[ERROR] File hashing failed: {e}")
        return hashes

    # ----------------------- DOMAIN INFORMATION ----------------------- #

    def domain_info(self, domain):
        """
        Fetches WHOIS and DNS records for a domain.

        Args:
            domain (str): Target domain.

        Returns:
            dict: WHOIS and DNS information.
        """
        print(f"[INFO] Fetching information for domain: {domain}")
        info = {"whois": None, "dns": None}
        try:
            info["whois"] = whois.whois(domain)
            dns_records = resolver.query(domain, "A")
            info["dns"] = [record.address for record in dns_records]
        except Exception as e:
            print(f"[ERROR] Failed to fetch domain information: {e}")
        return info

    # ----------------------- FTP ENUMERATION ----------------------- #

    def ftp_enum(self, host):
        """
        Enumerates files on an FTP server.

        Args:
            host (str): FTP server host.

        Returns:
            list: List of files and directories.
        """
        print(f"[INFO] Enumerating FTP server: {host}")
        files = []
        try:
            ftp = ftplib.FTP(host)
            ftp.login()
            files = ftp.nlst()
            ftp.quit()
        except Exception as e:
            print(f"[ERROR] FTP enumeration failed: {e}")
        return files

    # ----------------------- SUMMARY ----------------------- #

    def summary(self):
        """
        Prints a summary of available pentesting tools.
        """
        tools = [
            "Network Scanning",
            "Port Scanning",
            "Vulnerability Scanning",
            "Password Brute Force",
            "SQL Injection Testing",
            "XSS Testing",
            "File Hashing",
            "Domain Information Retrieval",
            "FTP Enumeration"
        ]
        print("[INFO] Pentesting Module Summary:")
        for tool in tools:
            print(f"- {tool}")
