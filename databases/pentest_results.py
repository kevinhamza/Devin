import sqlite3
import os
from datetime import datetime

DB_PATH = "databases/pentest_results.db"

# Ensure the directory exists
os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)

# Connect to the database
connection = sqlite3.connect(DB_PATH)
cursor = connection.cursor()

# Create the pentest_results table
cursor.execute("""
CREATE TABLE IF NOT EXISTS pentest_results (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    target_domain TEXT NOT NULL,
    vulnerability TEXT NOT NULL,
    severity TEXT CHECK(severity IN ('Low', 'Medium', 'High', 'Critical')) NOT NULL,
    report TEXT,
    date_reported TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")
connection.commit()


def add_pentest_result(target_domain, vulnerability, severity, report):
    """
    Add a new pentest result to the database.
    """
    cursor.execute("""
    INSERT INTO pentest_results (target_domain, vulnerability, severity, report)
    VALUES (?, ?, ?, ?)
    """, (target_domain, vulnerability, severity, report))
    connection.commit()
    print(f"Pentest result for {target_domain} added successfully.")


def get_all_pentest_results():
    """
    Retrieve all pentest results from the database.
    """
    cursor.execute("SELECT * FROM pentest_results ORDER BY date_reported DESC")
    return cursor.fetchall()


def search_pentest_results(target_domain):
    """
    Search pentest results by target domain.
    """
    cursor.execute("""
    SELECT * FROM pentest_results
    WHERE target_domain = ?
    ORDER BY date_reported DESC
    """, (target_domain,))
    return cursor.fetchall()


def delete_pentest_result(record_id):
    """
    Delete a pentest result by ID.
    """
    cursor.execute("DELETE FROM pentest_results WHERE id = ?", (record_id,))
    connection.commit()
    print(f"Pentest result with ID {record_id} deleted successfully.")


# Test the implementation (if required)
if __name__ == "__main__":
    # Add a sample record
    add_pentest_result(
        target_domain="example.com",
        vulnerability="SQL Injection",
        severity="High",
        report="Exploit found in login parameter. Needs urgent patching."
    )

    # Retrieve and display all results
    results = get_all_pentest_results()
    for result in results:
        print(result)

    # Search for a specific domain
    domain_results = search_pentest_results("example.com")
    for result in domain_results:
        print(f"Search Result: {result}")

    # Delete a record (uncomment to test)
    # delete_pentest_result(record_id=1)

# Close the database connection
connection.close()
