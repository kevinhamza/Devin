"""
Unit Tests for the Pentesting Module in the Devin Project.
"""

import unittest
from unittest.mock import patch, MagicMock
from modules.pentesting.pentesting_tools import (
    scan_network,
    test_xss_vulnerability,
    test_sql_injection,
    enumerate_subdomains,
    analyze_headers,
)

class TestPentestingModule(unittest.TestCase):
    def setUp(self):
        self.target_url = "http://example.com"
        self.test_headers = {
            "X-Frame-Options": "SAMEORIGIN",
            "X-Content-Type-Options": "nosniff",
        }
        self.subdomain_list = ["test.example.com", "api.example.com"]
        self.vulnerable_param = {"search": "<script>alert('XSS')</script>"}

    @patch("modules.pentesting.pentesting_tools.scan_network")
    def test_scan_network(self, mock_scan):
        mock_scan.return_value = ["192.168.1.1", "192.168.1.2"]
        result = scan_network("192.168.1.0/24")
        self.assertIn("192.168.1.1", result)
        self.assertIn("192.168.1.2", result)
        mock_scan.assert_called_once_with("192.168.1.0/24")

    @patch("modules.pentesting.pentesting_tools.test_xss_vulnerability")
    def test_xss_vulnerability(self, mock_xss):
        mock_xss.return_value = True
        result = test_xss_vulnerability(self.target_url, self.vulnerable_param)
        self.assertTrue(result)
        mock_xss.assert_called_once_with(self.target_url, self.vulnerable_param)

    @patch("modules.pentesting.pentesting_tools.test_sql_injection")
    def test_sql_injection(self, mock_sql_injection):
        mock_sql_injection.return_value = {"vulnerable": True, "payload": "' OR '1'='1"}
        result = test_sql_injection(self.target_url)
        self.assertTrue(result["vulnerable"])
        self.assertEqual(result["payload"], "' OR '1'='1")
        mock_sql_injection.assert_called_once_with(self.target_url)

    @patch("modules.pentesting.pentesting_tools.enumerate_subdomains")
    def test_enumerate_subdomains(self, mock_enum_subdomains):
        mock_enum_subdomains.return_value = self.subdomain_list
        result = enumerate_subdomains("example.com")
        self.assertListEqual(result, self.subdomain_list)
        mock_enum_subdomains.assert_called_once_with("example.com")

    @patch("modules.pentesting.pentesting_tools.analyze_headers")
    def test_analyze_headers(self, mock_analyze_headers):
        mock_analyze_headers.return_value = {"security_headers": True, "missing": []}
        result = analyze_headers(self.test_headers)
        self.assertTrue(result["security_headers"])
        self.assertListEqual(result["missing"], [])
        mock_analyze_headers.assert_called_once_with(self.test_headers)

if __name__ == "__main__":
    unittest.main()
